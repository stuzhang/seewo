name: Build and Release

# 触发条件：推送到main分支、创建标签或手动触发
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 环境变量
env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Windows构建
  build:
    name: Build Windows App
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      # Windows构建工具安装
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Build application
        run: pnpm run build

      - name: Build Windows Electron app
        run: pnpm run dist:win
        env:
          # 禁用代码签名（可根据需要启用）
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # 禁用自动发布到GitHub
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # 跳过发布步骤
          EP_DRAFT: false
          EP_PRE_RELEASE: false
          # Windows代码签名配置（如需要）
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # macOS代码签名配置（如需要）
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # 上传Windows构建产物
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: |
            dist-electron/*.exe
          retention-days: 30

  # 发布Windows版本（仅在创建标签时触发）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-x64
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Windows Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}